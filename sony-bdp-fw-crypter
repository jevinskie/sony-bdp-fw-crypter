#!/usr/bin/env python3
import argparse
import logging
import sys

from rich.console import Console
from rich.logging import RichHandler

LOG_FORMAT = "%(message)s"
logging.basicConfig(
    level=logging.WARNING,
    format=LOG_FORMAT,
    datefmt="[%X]",
    handlers=[RichHandler(console=Console(stderr=True), rich_tracebacks=True)],
)

program_name = "sony-bdp-fw-crypter"

log = logging.getLogger(program_name)

# fmt: off
stupid_lut = (
    0xe8, 0x4d, 0x63, 0xf4, 0xf8, 0xa9, 0x21, 0x9c,
    0xc7, 0x82, 0xcd, 0xe3, 0xc1, 0xce, 0xc0, 0xfa,
    0xe7, 0xd6, 0x96, 0x46, 0x12, 0x03, 0x14, 0x33,
    0xed, 0x10, 0xec, 0x69, 0x16, 0xe0, 0x28, 0x30,
    0x77, 0x0e, 0x3d, 0xef, 0x36, 0x4c, 0x18, 0xeb,
    0x41, 0x89, 0x64, 0x8a, 0x70, 0x0c, 0x23, 0xa3,
    0x79, 0x6d, 0x75, 0x7e, 0x1a, 0x2d, 0x01, 0x91,
    0x88, 0xcb, 0xfc, 0x8b, 0xfd, 0x94, 0x0a, 0x39,
    0xbc, 0x98, 0x87, 0xbb, 0xc2, 0x9b, 0x81, 0x1c,
    0x4b, 0xa6, 0x58, 0x59, 0x45, 0x57, 0x8c, 0x7b,
    0x5a, 0x56, 0x08, 0x73, 0x65, 0xee, 0x2a, 0x25,
    0xb0, 0x5b, 0x55, 0xb2, 0xb8, 0x1e, 0xea, 0xc5,
    0x6a, 0x40, 0x86, 0x5c, 0x3c, 0x54, 0xbf, 0xf6,
    0xa8, 0xf2, 0x06, 0x4a, 0xfe, 0xc4, 0x32, 0x8d,
    0xf0, 0x5d, 0x35, 0x53, 0xd7, 0xbd, 0xba, 0x20,
    0x2f, 0xca, 0xe1, 0xcc, 0xa4, 0x44, 0x85, 0xde,
    0xdb, 0x5e, 0x27, 0x52, 0x6e, 0x38, 0x04, 0x66,
    0xd0, 0x92, 0xd3, 0xc6, 0x7d, 0x71, 0xda, 0x2c,
    0x9a, 0x49, 0x8e, 0x80, 0x13, 0x5f, 0x11, 0x51,
    0x15, 0x22, 0xcf, 0xac, 0x0f, 0xd5, 0xff, 0x3f,
    0x17, 0xad, 0xd8, 0xd9, 0xab, 0x02, 0x6b, 0x0d,
    0xdf, 0xf1, 0x84, 0x3b, 0x78, 0x19, 0x76, 0x60,
    0x50, 0xdc, 0xc3, 0xb5, 0x43, 0x0b, 0x95, 0x97,
    0x67, 0xd4, 0x29, 0xf7, 0xe4, 0x1b, 0xae, 0x48,
    0xb1, 0x8f, 0x24, 0x7a, 0x74, 0xfb, 0x34, 0x09,
    0x00, 0x31, 0x9f, 0x61, 0x4f, 0xb6, 0xa0, 0xa7,
    0xb4, 0x9e, 0x1d, 0xaa, 0xf9, 0xbe, 0x37, 0x2e,
    0xb9, 0x6f, 0xa5, 0x83, 0xa1, 0x93, 0x07, 0xe2,
    0x7f, 0x3e, 0xf3, 0x99, 0x62, 0x4e, 0xe9, 0xc8,
    0x6c, 0x68, 0x1f, 0x47, 0x42, 0x26, 0x9d, 0xe5,
    0x7c, 0x72, 0x3a, 0x2b, 0xe6, 0xf5, 0xd2, 0x90,
    0x05, 0xd1, 0xdd, 0xc9, 0xaf, 0xb7, 0xa2, 0xb3,
)
# fmt: on


def get_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(prog=program_name)
    enc_dec = parser.add_mutually_exclusive_group()
    enc_dec.add_argument("-e", "--encrypt", action="store_true")
    enc_dec.add_argument("-d", "--decrypt", action="store_true")
    parser.add_argument("-i", "--in", dest="in_file", required=True, help="BDP FW input file.")
    parser.add_argument("-o", "--out", dest="out_file", required=True, help="BDP FW output file.")
    return parser


def real_main(args: argparse.Namespace) -> int:
    if not (args.encrypt ^ args.decrypt):
        raise ValueError("Must specify one of, but not both, -e/--encrypt or -d/--decrypt.")
    with open(args.in_file, "rb") as inf, open(args.out_file, "wb") as of:
        ibuf = inf.read()
        obuf = bytearray(len(ibuf))
        for i in range(len(ibuf)):
            obuf[i] = stupid_lut[ibuf[i]]
        of.write(obuf)
    return 0


def main() -> int:
    try:
        return real_main(get_arg_parser().parse_args())
    except Exception:
        log.exception(f"Received an unexpected exception when running {program_name}")
        return 1
    except KeyboardInterrupt:
        return 0


if __name__ == "__main__":
    sys.exit(main())
